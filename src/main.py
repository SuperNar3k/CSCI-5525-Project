# CSCI 5525 - Group 11

################################
#           Modules            #
################################
import numpy as np
import pandas as pd

################################
#        Load HASYv2(s)        #
################################

# Be sure to unzip the .tar before running
from data import hasy_tools as hasy
# help(hasy) # prints below output

"""
Help on module hasy_tools:

NAME
    hasy_tools - Tools for the HASY dataset.

DESCRIPTION
    Type `./hasy_tools.py --help` for the command line tools and `help(hasy_tools)`
    in the interactive Python shell for the module options of hasy_tools.

FUNCTIONS
    create_random_overview(img_src, x_images, y_images)
        Create a random overview of images.

    data_by_class(data)
        Organize `data` by class.

        Parameters
        ----------
        data : list of dicts
            Each dict contains the key `symbol_id` which is the class label.

        Returns
        -------
        dbc : dict
            mapping class labels to lists of dicts

    generate_index(csv_filepath)
        Generate an index 0...k for the k labels.

        Parameters
        ----------
        csv_filepath : str
            Path to 'test.csv' or 'train.csv'

        Returns
        -------
        dict : Maps a symbol_id as in test.csv and
            train.csv to an integer in 0...k, where k is the total
            number of unique labels.

    load_images(csv_filepath, symbol_id2index, one_hot=True, flatten=False)
        Load the images into a 4D uint8 numpy array [index, y, x, depth].

        Parameters
        ----------
        csv_filepath : str
            'test.csv' or 'train.csv'
        symbol_id2index : dict
            Dictionary generated by generate_index
        one_hot : bool, optional
            Make label vector as 1-hot encoding, otherwise index
        flatten : bool, optional
            Flatten feature vector

        Returns
        -------
        images, labels : Images is a 4D uint8 numpy array [index, y, x, depth]
                         and labels is a 2D uint8 numpy array [index][1-hot enc].

    thresholdize(img, threshold=0.5)
        Create a black-and-white image from a grayscale image.
"""

# Load training data
csv_filepath = "data/classification-task/train.csv"
symbol_index = hasy.generate_index(csv_filepath)
train_data = hasy.load_images(csv_filepath,symbol_index)