import os
import numpy as np
from PIL import Image
from torch.utils.data import Dataset, DataLoader
from sklearn.model_selection import train_test_split
import torch 

def preprocess_image(image):
    # You can add any preprocessing steps here
    image = np.array(image, dtype=np.float32) / 255
    image = np.expand_dims(image, axis=0)
    return image

def load_preprocessed_crohme_data(data_dir='crohme_data', train_batch_size=32, val_batch_size=32):
    class CROHMEDataset(Dataset):
        def __init__(self, image_files, label_files):
            self.image_files = image_files
            self.label_files = label_files

        def __len__(self):
            return len(self.image_files)

        def __getitem__(self, idx):
            img_path = self.image_files[idx]
            label_path = self.label_files[idx]

            image = Image.open(img_path).convert('L')
            image = preprocess_image(image)

            labels = np.load(label_path)

            return torch.tensor(image, dtype=torch.float), torch.tensor(labels, dtype=torch.long)

    all_image_files = sorted([os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.endswith('.png')])
    all_label_files = sorted([os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.endswith('.npy')])

    train_image_files, val_image_files, train_label_files, val_label_files = train_test_split(all_image_files, all_label_files, test_size=0.2, random_state=42)

    train_data = DataLoader(CROHMEDataset(train_image_files, train_label_files), batch_size=train_batch_size, shuffle=True)
    val_data = DataLoader(CROHMEDataset(val_image_files, val_label_files), batch_size=val_batch_size, shuffle=False)

    return train_data, val_data

def load_new_equation_image(image_path):
    image = Image.open(image_path).convert('L')
    image = preprocess_image(image)
    image = torch.tensor(image, dtype=torch.float).unsqueeze(0)
    return image

def predict_latex_code(model, image_tensor):
    model.eval()
    with torch.no_grad():
        output = model(image_tensor)
        _, predicted = torch.max(output.data, 1)
        latex_code = [latex_symbols[i] for i in predicted.numpy()]  
    return " ".join(latex_code)
